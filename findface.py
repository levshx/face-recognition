# -*- coding: utf-8 -*-
"""FindFace.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U8Xabe6tMZ7A6kRYBTf0SbOOCb3SqpNp

# Описание (Подготовка)
Нейросеть для определения лица Елены на фото.
 
Используется GPU.
"""

print("=================== Загрузка датасетов ====================")
#Загрузка датасетов
!wget 'http://dlib.net/files/dlib_face_recognition_resnet_model_v1.dat.bz2' 
!wget 'http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2' 
 
print("================== Распаковка датасетов ====================")
#Распаковка датасетов
!rm dlib_face_recognition_resnet_model_v1.dat
!rm shape_predictor_68_face_landmarks.dat
!bzip2 -d shape_predictor_68_face_landmarks.dat.bz2
!bzip2 -d dlib_face_recognition_resnet_model_v1.dat.bz2
 
print("===================== Вывод директории =====================")
#Вывод директории
!ls

"""#Подключение библиотек

"""

#Подключение библиотек
import dlib
from skimage import io
from scipy.spatial import distance
from google.colab import files

"""#Загрузка готовой модели"""

sp = dlib.shape_predictor('shape_predictor_68_face_landmarks.dat')
facerec = dlib.face_recognition_model_v1('dlib_face_recognition_resnet_model_v1.dat')
detector = dlib.get_frontal_face_detector()

"""#Загружаем фотографию Елены"""

uploaded = files.upload()

for fn in uploaded.keys():
  img = io.imread(fn)
  !rm {fn}

dets = detector(img, 1)

for k, d in enumerate(dets):
    print("Detection {}: Left: {} Top: {} Right: {} Bottom: {}".format(
        k, d.left(), d.top(), d.right(), d.bottom()))
    shape = sp(img, d)

face_descriptor1 = facerec.compute_face_descriptor(img, shape)

"""#Фотография 2"""

uploaded = files.upload()

for fn in uploaded.keys():
  img = io.imread(fn)
  !rm {fn}

dets_webcam = detector(img, 1)

for k, d in enumerate(dets_webcam):
    print("Detection {}: Left: {} Top: {} Right: {} Bottom: {}".format(
        k, d.left(), d.top(), d.right(), d.bottom()))
    shape = sp(img, d)

face_descriptor2 = facerec.compute_face_descriptor(img, shape)

"""#Рассчитываем Евклидово расстояние между двумя дексрипторами лиц
В dlib рекомендуется использовать граничное значение Евклидова расстояния между дескрипторами лиц равное 0.6. Если Евклидово расстояние меньше 0.6, значит фотографии принадлежат одному человеку.

С использованием такой метрики dlib обеспечивает точность 99.38% на тесте распознавания лиц Labeled Faces in the Wild. Подробности можно посмотреть по ссылке - http://dlib.net/face_recognition.py.html
"""

a = distance.euclidean(face_descriptor1, face_descriptor2)

if a < 0.6:
  print("Елена найдена")
else:
  print("Разные люди")

print("Descriptor: ",a)